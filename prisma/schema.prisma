generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  sessions      Session[]
  accounts      Account[]
  courses       Course[]
  codeWalkthroughs CodeWalkthrough[]

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Course {
  id String @id @default(uuid())

  title       String
  description String
  fileKey     String

  price    Int
  duration Int
  level    CourseLevel @default(Beginner)

  category         String
  smallDescription String
  slug             String @unique

  status CourseStatus @default(Draft)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  chapter Chapter[]
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
  Archived
}

model Chapter {
  id String @id @default(uuid())

  title String
  position Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  lesson Lesson[]
}

model Lesson {
  id String @id @default(uuid())

  title String
  description String?
  thumbnailKey String?
  videoKey String?
  position Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String
  
  codeWalkthroughs CodeWalkthrough[]
}

model CodeWalkthrough {
  id String @id @default(uuid())

  title String
  description String?
  
  // Course/Chapter/Lesson relationships
  courseId String
  chapterId String
  lessonId String
  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  
  // Instructor
  instructorId String
  user User @relation(fields: [instructorId], references: [id], onDelete: Cascade)
  
  // Session metadata
  startTime DateTime
  endTime DateTime
  duration Int // in milliseconds
  
  // Content
  initialCode String
  finalCode String
  
  // Audio - stored in Tigris S3
  audioFileKey String?
  audioContentType String?
  audioSize Int?
  
  // Event counts
  codeEventCount Int @default(0)
  audioEventCount Int @default(0)
  
  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  // Events
  codeEvents CodeEvent[]
  audioEvents AudioEvent[]
  
  @@map("code_walkthrough")
}

model CodeEvent {
  id String @id @default(uuid())
  
  walkthroughId String
  walkthrough CodeWalkthrough @relation(fields: [walkthroughId], references: [id], onDelete: Cascade)
  
  timestamp DateTime
  type String // "keypress", "delete", "paste"
  data String? // The code content at this point
  
  createdAt DateTime @default(now())
  
  @@map("code_event")
}

model AudioEvent {
  id String @id @default(uuid())
  
  walkthroughId String
  walkthrough CodeWalkthrough @relation(fields: [walkthroughId], references: [id], onDelete: Cascade)
  
  timestamp DateTime
  type String // "start", "stop", "pause", "resume"
  
  createdAt DateTime @default(now())
  
  @@map("audio_event")
}