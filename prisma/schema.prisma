generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String           @id
  name           String
  email          String
  emailVerified  Boolean
  image          String?
  createdAt      DateTime
  updatedAt      DateTime
  sessions       Session[]
  accounts       Account[]
  courses        Course[]
  enrollments    Enrollment[]
  lessonProgress LessonProgress[]
  codeSnippets   CodeSnippet[]

  stripeCustomerId String? @unique

  role       String?
  banned     Boolean?
  banReason  String?
  banExpires DateTime?

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime
  updatedAt DateTime
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@unique([token])
  @@index([userId])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Course {
  id String @id @default(uuid())

  title       String
  description String
  fileKey     String

  price    Int
  duration Int
  level    CourseLevel @default(Beginner)

  stripePriceId String @unique

  category         String
  smallDescription String
  slug             String @unique

  status CourseStatus @default(Draft)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  chapter    Chapter[]
  enrollment Enrollment[]

  // Junction table relationships (testing alongside existing relationships)
  courseChapters CourseChapter[]

  @@index([status])
}

enum CourseLevel {
  Beginner
  Intermediate
  Advanced
}

enum CourseStatus {
  Draft
  Published
  Archived
}

model Chapter {
  id String @id @default(uuid())

  title    String
  position Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  lesson Lesson[]

  // Junction table relationships (testing alongside existing relationships)
  courseChapters CourseChapter[]
  chapterLessons ChapterLesson[]

  @@index([courseId, position])
}

model Lesson {
  id String @id @default(uuid())

  title        String
  description  String?
  thumbnailKey String?
  videoKey     String?
  position     Int
  isPublished  Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  chapter   Chapter? @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String?

  lessonProgress LessonProgress[]
  walkthroughs   LessonWalkthrough[]
  codeSnippets   LessonCodeSnippet[]

  // Junction table relationships (testing alongside existing relationships)
  chapterLessons ChapterLesson[]

  @@index([chapterId, position])
  @@index([position])
}

model Enrollment {
  id String @id @default(uuid())

  amount Int
  status EnrollmentStatus @default(Pending)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  course   Course @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  @@unique([userId, courseId])
}

enum EnrollmentStatus {
  Pending
  Active
  Cancelled
}

model LessonProgress {
  id String @id @default(uuid())

  completed Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String

  lesson   Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId String

  @@unique([userId, lessonId])
  @@index([userId])
  @@index([lessonId])
  @@index([completed])
}

model CodeWalkthrough {
  id          String              @id @default(uuid())
  name        String
  description String?
  authorId    String?
  audioKey    String
  createdAt   DateTime            @default(now())
  updatedAt   DateTime            @updatedAt
  steps       WalkthroughStep[]
  lessons     LessonWalkthrough[]
}

model WalkthroughStep {
  id            String          @id @default(uuid())
  walkthrough   CodeWalkthrough @relation(fields: [walkthroughId], references: [id], onDelete: Cascade)
  walkthroughId String
  stepIndex     Int
  code          String
  timestamp     Float
  createdAt     DateTime        @default(now())
}

model LessonWalkthrough {
  id            String          @id @default(uuid())
  lesson        Lesson          @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId      String
  walkthrough   CodeWalkthrough @relation(fields: [walkthroughId], references: [id], onDelete: Cascade)
  walkthroughId String
  position      Int

  @@unique([lessonId, walkthroughId])
  @@index([lessonId])
  @@index([walkthroughId])
}

model CodeSnippet {
  id          String   @id @default(uuid())
  title       String
  description String?
  code        String
  language    String? // e.g., "javascript", "python", "typescript"
  tags        String[] // Array of tags for categorization

  clickCount Int @default(0)

  isFeatured Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId String

  lessonSnippets LessonCodeSnippet[]

  @@index([authorId])
  @@index([language])
  @@index([isFeatured])
  @@index([createdAt])
}

model LessonCodeSnippet {
  id          String      @id @default(uuid())
  lesson      Lesson      @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId    String
  codeSnippet CodeSnippet @relation(fields: [snippetId], references: [id], onDelete: Cascade)
  snippetId   String
  position    Int // Order within the lesson
  context     String? // Optional context about how this snippet relates to the lesson

  createdAt DateTime @default(now())

  @@unique([lessonId, snippetId])
  @@index([lessonId])
  @@index([snippetId])
}

// Junction Tables for Many-to-Many Relationships
// These are added alongside existing relationships for testing

model CourseChapter {
  id String @id @default(uuid())

  course    Course  @relation(fields: [courseId], references: [id], onDelete: Cascade)
  courseId  String
  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String

  position Int // Position of chapter within this course

  createdAt DateTime @default(now())

  @@unique([courseId, chapterId])
  @@unique([courseId, position]) // Ensure unique positions per course
  @@index([courseId])
  @@index([chapterId])
}

model ChapterLesson {
  id String @id @default(uuid())

  chapter   Chapter @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  chapterId String
  lesson    Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  lessonId  String

  position Int // Position of lesson within this chapter

  createdAt DateTime @default(now())

  @@unique([chapterId, lessonId])
  @@unique([chapterId, position]) // Ensure unique positions per chapter
  @@index([chapterId])
  @@index([lessonId])
}
